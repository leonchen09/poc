using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Office.Interop.Excel;
using System.Xml;
using sch = System.Xml.Schema;
using System.IO;

namespace PdePlugin
{
    class GenXsd
    {
        public const string PDE_XSD_MAP_NAME = "pde_xsd_map";

        private const string ns = "http://www.w3.org/2001/XMLSchema";
        private sch.XmlSchema xmlschema;

        public List<string> selectedTables { get; set; }

        public List<List<string>> selectedColumns { get; set; }

        public List<List<string>> tabColsType { get; set; }

        public GenXsd()
        {
        }

        //gen new xsd base on selected tables and columns which generated by OSQL.
        private string CreateXsd()
        {
            
            xmlschema = new sch.XmlSchema();

            //Create the PdeData element
            sch.XmlSchemaElement rootElement = new sch.XmlSchemaElement();
            rootElement.Name = "PdeData";
            xmlschema.Items.Add(rootElement);
            sch.XmlSchemaComplexType rootType = new sch.XmlSchemaComplexType();
            rootType.IsMixed = false;
            sch.XmlSchemaAll rootAll = new sch.XmlSchemaAll();
            rootType.Particle = rootAll;
            rootElement.SchemaType = rootType;

            for (int i = 0; i < selectedTables.Count; i++)
            {
                rootAll = GenOneTabElement(rootAll, selectedTables[i], selectedColumns[i], tabColsType[i]);
            }

            xmlschema.Compile(new sch.ValidationEventHandler(ValidationEventHandler));
            FileStream stream = new FileStream("e:\\temp.xsd", FileMode.Create);

            //Write the file
            xmlschema.Write(stream);
            stream.Close();

            return "e:\\temp.xsd";
        }

        void ValidationEventHandler(object sender, sch.ValidationEventArgs args)
        {
            
        }  

        private sch.XmlSchemaAll GenOneTabElement(sch.XmlSchemaAll curElement, string tableAlias, List<string> tabCols, List<string> tabColTypes)
        {
            sch.XmlSchemaElement rootElement = new sch.XmlSchemaElement();
            rootElement.Name = tableAlias;
            rootElement.MinOccurs = 0;
            rootElement.MaxOccursString = "unbounded";
            curElement.Items.Add(rootElement);

            sch.XmlSchemaComplexType rootType = new sch.XmlSchemaComplexType();
            rootType.IsMixed = false;
            sch.XmlSchemaAll rootAll = new sch.XmlSchemaAll();
            rootType.Particle = rootAll;
            rootElement.SchemaType = rootType;

            for (int i = 0; i < tabCols.Count; i ++ )
            {
                string colName = tabCols[i];
                string type = tabColTypes[i];
                sch.XmlSchemaElement column = new sch.XmlSchemaElement();
                column.Name = colName;
                column.SchemaTypeName = new XmlQualifiedName(type, ns);
                rootAll.Items.Add(column);
            }
            return rootAll;
        }

        public XmlMap ImportXsd(Workbook workbook)
        {
            //clear the old pde xsd map if it existed.
            XmlMaps xms = workbook.XmlMaps;
            foreach (XmlMap map in xms)
            {
                if (PDE_XSD_MAP_NAME.Equals(map.Name))
                {
                    map.Delete();
                    break;
                }
            }
            //import new xsd
            XmlMap xmap = xms.Add(CreateXsd());
            xmap.Name = PDE_XSD_MAP_NAME;
            return xmap;
        }
    }
}
