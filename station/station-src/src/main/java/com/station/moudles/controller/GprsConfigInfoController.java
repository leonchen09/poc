package com.station.moudles.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.collections.CollectionUtils;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.beans.TypeMismatchException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mchange.v2.async.StrandedTaskReporting;
import com.station.common.Constant;
import com.station.common.utils.StringUtils;
import com.station.moudles.entity.ModifyBalanceSend;
import com.station.moudles.entity.GprsConfigInfo;
import com.station.moudles.entity.GprsConfigInfoDetail;
import com.station.moudles.entity.GprsConfigInfoStation;
import com.station.moudles.entity.GprsDeviceType;
import com.station.moudles.entity.ModifyGprsidSend;
import com.station.moudles.entity.PackDataExpandLatest;
import com.station.moudles.entity.StationInfo;
import com.station.moudles.mapper.PackDataExpandLatestMapper;
import com.station.moudles.service.GprsDeviceTypeService;
import com.station.moudles.service.ModifyBalanceInfoService;
import com.station.moudles.service.ModifyGprsidSendService;
import com.station.moudles.service.StationInfoService;
import com.station.moudles.service.impl.GprsConfigInfoServiceImpl;
import com.station.moudles.service.impl.ModelCalculationServiceImpl;
import com.station.moudles.service.impl.ModifyBalanceInfoServiceImpl;
import com.station.moudles.vo.AjaxResponse;
import com.station.moudles.vo.PulseVo;
import com.station.moudles.vo.ShowPage;
import com.station.moudles.vo.search.SearchGprsConfigInfoPagingVo;

import io.swagger.annotations.ApiOperation;

/**
 * This class was generated by Bill Generator. This class corresponds to the
 * database table gprs_config_info 基站gprs参数配置表
 *
 * @zdmgenerated 2017-28-20 11:28
 */

@Controller
@RequestMapping(value = "/gprsConfigInfo")
public class GprsConfigInfoController extends BaseController {
	/*
	 * @Autowired GprsConfigInfoService gprsConfigInfoSer;
	 */
	@Autowired
	GprsConfigInfoServiceImpl gprsConfigInfoSer;
	@Autowired
	ModifyGprsidSendService modifyGprsidSendSer;
	@Autowired
	ModelCalculationServiceImpl modelCalculationSer;
	@Autowired
	PackDataExpandLatestMapper packDataExpandLatestMapper;
	@Autowired
	StationInfoService stationInfoSer;
	@Autowired
	ModifyBalanceInfoService modifyBalanceInfoSer;
	@Autowired
	GprsDeviceTypeService gprsDeviceTypeSer;

	@RequestMapping(value = "/listPage", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取基站gprs参数配置表列表", notes = "返回基站gprs参数配置表列表")
	public AjaxResponse<ShowPage<GprsConfigInfo>> getGprsConfigInfoListPage(
			@RequestBody SearchGprsConfigInfoPagingVo searchGprsConfigInfoPagingVo) {
		// -----add 查询出有备用主机
		searchGprsConfigInfoPagingVo.setGprsFlag(1);

		List<GprsConfigInfo> gprsConfigInfoList = gprsConfigInfoSer
				.selectListSelectivePaging(searchGprsConfigInfoPagingVo);
		ShowPage<GprsConfigInfo> page = new ShowPage<GprsConfigInfo>(searchGprsConfigInfoPagingVo, gprsConfigInfoList);
		AjaxResponse<ShowPage<GprsConfigInfo>> ajaxResponse = new AjaxResponse<ShowPage<GprsConfigInfo>>(page);
		return ajaxResponse;
	}

	@RequestMapping(value = "/station/listPage", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取基站gprs参数配置表列表", notes = "返回基站gprs参数配置表列表")
	public AjaxResponse<ShowPage<GprsConfigInfoStation>> getGprsConfigInfoStationListPage(
			@RequestBody SearchGprsConfigInfoPagingVo searchGprsConfigInfoPagingVo) {
		// -----add 没有备用的主机
		searchGprsConfigInfoPagingVo.setGprsFlag(0);

		List<GprsConfigInfoStation> gprsConfigInfoList = gprsConfigInfoSer.selectStationListSelectivePaging(searchGprsConfigInfoPagingVo);
		//返回deviceTypeStr
		if (gprsConfigInfoList.size() != 0) {
			GprsDeviceType gprsDeviceType = new GprsDeviceType();
			gprsDeviceType.setTypeCode(gprsConfigInfoList.get(0).getDeviceType());
			List<GprsDeviceType> deviceTypeStr = gprsDeviceTypeSer.selectListSelective(gprsDeviceType);
			if (deviceTypeStr.size() != 0) {
				gprsConfigInfoList.get(0).setDeviceTypeStr(deviceTypeStr.get(0).getTypeName());
			}
		}
		ShowPage<GprsConfigInfoStation> page = new ShowPage<GprsConfigInfoStation>(searchGprsConfigInfoPagingVo,gprsConfigInfoList);
		AjaxResponse<ShowPage<GprsConfigInfoStation>> ajaxResponse = new AjaxResponse<ShowPage<GprsConfigInfoStation>>(page);
		return ajaxResponse;
	}

	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取基站gprs参数配置表列表", notes = "返回基站gprs参数配置表列表")
	public AjaxResponse<List<GprsConfigInfo>> getGprsConfigInfoList(@RequestBody GprsConfigInfo gprsConfigInfo) {
		List<GprsConfigInfo> gprsConfigInfoList = gprsConfigInfoSer.selectListSelective(gprsConfigInfo);
		AjaxResponse<List<GprsConfigInfo>> ajaxResponse = new AjaxResponse<List<GprsConfigInfo>>(
				Constant.RS_CODE_SUCCESS, "查询成功", gprsConfigInfoList);
		return ajaxResponse;
	}

	@RequestMapping(value = "/entity/{id}", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk获取基站gprs参数配置表", notes = "根据pk获取基站gprs参数配置表")
	public AjaxResponse<GprsConfigInfo> getEntity(@PathVariable Integer id) {
		if (id == null) {
			return new AjaxResponse<GprsConfigInfo>(Constant.RS_CODE_ERROR, "请选择pk！");
		}
		GprsConfigInfo gprsConfigInfo = gprsConfigInfoSer.selectByPrimaryKey(id);
		AjaxResponse<GprsConfigInfo> ajaxResponse = new AjaxResponse<GprsConfigInfo>(Constant.RS_CODE_SUCCESS,"获取基站gprs参数配置表成功！");
		if (gprsConfigInfo != null) {
			ajaxResponse.setData(gprsConfigInfo);
		} else {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("获取基站gprs参数配置表失败！");
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateByCompanyId", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新基站gprs参数配置表", notes = "根据pk更新基站gprs参数配置表，属性为null的不更新")
	public AjaxResponse<Object> updateByCompanyId(@RequestBody GprsConfigInfo gprsConfigInfo) {
		if (gprsConfigInfo.getCompanyId() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置公司id！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改基站gprs参数配置表出错！");
		request.setAttribute(Constant.ERROR_REQUEST, ajaxResponse);

		int num = estimateIsNull(gprsConfigInfo);
		if (num != 0) {
			gprsConfigInfoSer.updateByCompanyId(gprsConfigInfo);
		}

		// gprs_config_info表修改完之后
		//将gprsDeviceType 设置为null 以前没有传递这个，避免错误
		gprsConfigInfo.setDeviceType(null);
		StationInfo queryStationInfo = new StationInfo();
		queryStationInfo.setCompanyId3(gprsConfigInfo.getCompanyId());
		List<StationInfo> stationList = stationInfoSer.selectListSelective(queryStationInfo);
		for (StationInfo stationInfo : stationList) {
			if (!String.valueOf(-1).equals(stationInfo.getGprsId())) {
				GprsConfigInfo query = new GprsConfigInfo();
				query.setGprsId(stationInfo.getGprsId());
				List<GprsConfigInfo> gprsConfig = gprsConfigInfoSer.selectListSelective(query);
				GprsConfigInfo gprsInfo = CollectionUtils.isEmpty(gprsConfig) ? null : gprsConfig.get(0);
				//判断---排除检测设备进行均衡参数设置
				if (gprsInfo != null && gprsInfo.getDeviceType() != 3 && gprsInfo.getDeviceType() != 4) {
					// ---add 11/1添加均衡信息
					ModifyBalanceSend balanceSend = new ModifyBalanceSend();
					balanceSend.setGprsId(stationInfo.getGprsId());
					balanceSend.setSendDone(0);// 未发送
					if (gprsConfigInfo.getPara1() != null) {
						balanceSend.setPara1(gprsConfigInfo.getPara1());
					}
					if (gprsConfigInfo.getPara2() != null) {
						balanceSend.setPara2(gprsConfigInfo.getPara2());
					}
					if (gprsConfigInfo.getPara3() != null) {
						balanceSend.setPara3(gprsConfigInfo.getPara3());
					}
					if (gprsConfigInfo.getPara4() != null) {
						balanceSend.setPara4(gprsConfigInfo.getPara4());
					}
					if (gprsConfigInfo.getPara5() != null) {
						balanceSend.setPara5(gprsConfigInfo.getPara5());
					}
					if (gprsConfigInfo.getPara6() != null) {
						balanceSend.setPara6(gprsConfigInfo.getPara6());
					}
					if (gprsConfigInfo.getPara7() != null) {
						balanceSend.setPara7(gprsConfigInfo.getPara7());
						modifyBalanceInfoSer.insertSelective(balanceSend);
					} else {
						ajaxResponse.setCode(Constant.RS_CODE_ERROR);
						ajaxResponse.setMsg("发送均衡参数指令失败！");
					}
				}
				// -------end
				PackDataExpandLatest packDataExpandLatest = packDataExpandLatestMapper
						.selectByPrimaryKey(stationInfo.getGprsId());
				if (packDataExpandLatest != null) {
//					GprsConfigInfo condition = new GprsConfigInfo();
//					condition.setGprsId(stationInfo.getGprsId());
//					List<GprsConfigInfo> configs = gprsConfigInfoSer.selectListSelective(condition);
//					GprsConfigInfo gprsInfo = CollectionUtils.isEmpty(configs) ? null : configs.get(0);
					if (gprsConfigInfo.getConsoleCellCapError() != null
							|| gprsConfigInfo.getConsoleCellCapNormal() != null) {
						// 单体性能重新设置，故障单体重新统计
						modelCalculationSer.calcualteEntityPerformance(stationInfo, gprsInfo, packDataExpandLatest);
					} else if (gprsConfigInfo.getDurationMinExcellent() != null) {
						// 电池组预测时长的状态重新设置
						modelCalculationSer.setStationDurationStatus(stationInfo, gprsInfo,
								packDataExpandLatest.getPackDischargeTimePred());
					}
					// 更新
					stationInfoSer.updateByGprsSelective(stationInfo);
					packDataExpandLatestMapper.updateByPrimaryKeySelective(packDataExpandLatest);

				}
			}
		}
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("主机指令已发送！");
		return ajaxResponse;
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新基站gprs参数配置表", notes = "根据pk更新基站gprs参数配置表，属性为null的不更新")
	public AjaxResponse<Object> updateById(@RequestBody GprsConfigInfo gprsConfigInfo) {
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改基站gprs参数配置表出错！");
		request.setAttribute(Constant.ERROR_REQUEST, ajaxResponse);
		gprsConfigInfoSer.updateById(gprsConfigInfo);

		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改基站gprs参数配置表成功！");
		return ajaxResponse;
	}
	
	@RequestMapping(value = "/updateParam", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新基站gprs:远程主机参数配置", notes = "属性为null的不更新")
	public AjaxResponse<Object> updateParam( @RequestBody GprsConfigInfo gprsConfigInfo) {
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<>(Constant.RS_CODE_SUCCESS, "远程主机参数配置成功！");
		String str= "";
		//心跳间隔(秒)
		if(StringUtils.getString(gprsConfigInfo.getHeartbeatInterval()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}|10000$");
			boolean heartbeatInterval = regex.matcher(gprsConfigInfo.getHeartbeatInterval().toString()).matches();
			if(!heartbeatInterval || gprsConfigInfo.getHeartbeatInterval().doubleValue() < 1 || gprsConfigInfo.getHeartbeatInterval().doubleValue() >10000) {
				str +="1、心跳间隔填写必须是1-10000的整数！\n";
			}
		}
		//充电状态下状态帧传输间隔，单位秒

		if(StringUtils.getString(gprsConfigInfo.getChargeInterval()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}|10000$");
			boolean chargeInterval = regex.matcher(gprsConfigInfo.getChargeInterval().toString()).matches();
			if(!chargeInterval || gprsConfigInfo.getChargeInterval().doubleValue() < 1 || gprsConfigInfo.getChargeInterval().doubleValue() >10000) {
				str +="1、充电状态下状态帧传输间1-10000的整数！\n";
			}
		}
		//浮充状态下数据传输间隔(秒)
		if(StringUtils.getString(gprsConfigInfo.getFloatInterval()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}|10000$");
			boolean floatInterval = regex.matcher(gprsConfigInfo.getFloatInterval().toString()).matches();
			if(!floatInterval || gprsConfigInfo.getFloatInterval().doubleValue() < 1 || gprsConfigInfo.getFloatInterval().doubleValue() > 10000) {
				str +="2、浮充状态下数据传输间隔填写必须是1-10000整数！\n";
			}
		}
		//放电状态下数据传输间隔(秒)
		if(StringUtils.getString(gprsConfigInfo.getDischargeInterval()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}|10000$");
			boolean dischargeInterval = regex.matcher(gprsConfigInfo.getDischargeInterval().toString()).matches();
			if(!dischargeInterval || gprsConfigInfo.getDischargeInterval().doubleValue() < 1 || gprsConfigInfo.getDischargeInterval() > 10000) {
				str +="3、浮充状态下数据传输间隔填写必须是1-10000整数！\n";
			}
		}
		//充电判断阈值(A) 充电判断阈值范围为 -100-100 小数点不超过3位
		if(StringUtils.getString(gprsConfigInfo.getChargeThreshold()) != null) {
			Pattern regex = Pattern.compile("^-?\\d{1,2}(\\.\\d{1,3})?|100|-100$");
			boolean charge = regex.matcher(gprsConfigInfo.getChargeThreshold().toString()).matches();
			if(!charge) {
				str +="4、充电判断阈值超过范围-100-100;小数位不超三位！\n";
			}
		}
		//放电判断阈值(A) 放电判断阈值范围为 -100-100 小数点不超过3位
		if(StringUtils.getString(gprsConfigInfo.getDischargeThreshold()) != null) {
			Pattern regex = Pattern.compile("^-?\\d{1,2}(\\.\\d{1,3})?|100|-100$");
			boolean discharge = regex.matcher(gprsConfigInfo.getDischargeThreshold().toString()).matches();
			if(!discharge) {
				str +="5、放电判断阈值超过范围-100-100;小数位不超三位！\n";
			}
		}
		//电池标称容量(安时Ah) 标称容量需大于当前容量
		if(StringUtils.getString(gprsConfigInfo.getNominalCapacity()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}(\\.\\d{1,3})?|10000$");
			boolean nominalCapacity = regex.matcher(gprsConfigInfo.getNominalCapacity().toString()).matches();
			if(!nominalCapacity || gprsConfigInfo.getNominalCapacity().doubleValue() < 1 || gprsConfigInfo.getNominalCapacity().doubleValue() > 10000) {
				str +="6、电池标称容量(安时Ah)必须是1-10000;小数位不超三位！\n";
			}
		}
		//电池当前容量(安时Ah)
		if(StringUtils.getString(gprsConfigInfo.getCurrentCapacity()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,4}(\\.\\d{1,3})?|10000$$");
			boolean currentCapacity = regex.matcher(gprsConfigInfo.getCurrentCapacity().toString()).matches();
			if(!currentCapacity || gprsConfigInfo.getCurrentCapacity().doubleValue() < 1 || gprsConfigInfo.getCurrentCapacity().doubleValue() > 10000) {
				str +="7、电池当前容量(安时Ah)必须是1-10000;小数位不超三位！\n";
			}
		}
		
		//总电压过高告警阈值(伏特V)
		if(StringUtils.getString(gprsConfigInfo.getVolHighWarningThreshold()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}(\\.\\d{1,3})?|10000$");
			boolean Vol = regex.matcher(gprsConfigInfo.getVolHighWarningThreshold().toString()).matches();
			if(!Vol || gprsConfigInfo.getVolHighWarningThreshold().doubleValue() < 1 || gprsConfigInfo.getVolHighWarningThreshold().doubleValue() > 10000) {
				str +="8、总电压过高告警阈值(伏特V)必须是1-10000;小数位不超三位！\n";
			}
		}	
		//总电压过低告警阈值(伏特V)不超过三位小数点
		if(StringUtils.getString(gprsConfigInfo.getVolLowWarningThreshold()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}(\\.\\d{1,3})?|10000$");
			boolean volLow = regex.matcher(gprsConfigInfo.getVolLowWarningThreshold().toString()).matches();
			if(!volLow || gprsConfigInfo.getVolLowWarningThreshold().doubleValue() < 1 || gprsConfigInfo.getVolLowWarningThreshold().doubleValue() > 10000) {
				str +="9、总电压过低告警阈值(伏特V)必须是1-10000;小数位不超三位！\n";
			}
		}
		//单体温度过高告警阈值(摄氏度℃)
		if(StringUtils.getString(gprsConfigInfo.getTemHighWarningThreshold()) != null) {
			Pattern regex = Pattern.compile("^[1-9]\\d{0,3}|10000$");
			boolean temHigh = regex.matcher(gprsConfigInfo.getTemHighWarningThreshold().toString()).matches();
			if(!temHigh || gprsConfigInfo.getTemHighWarningThreshold().doubleValue() < 1 || gprsConfigInfo.getTemHighWarningThreshold().doubleValue() > 10000) {
				str +="10、单体温度过高告警阈值(摄氏度℃)必须是1-10000整数！\n";
			}
		}
		//单体温度过低告警阈值(摄氏度℃)
		if(StringUtils.getString(gprsConfigInfo.getTemLowWarningThreshold()) != null) {
			Pattern regex = Pattern.compile("^(-?)([1-2]?)\\d{1,2}|300|-300$");
			boolean temLow = regex.matcher(gprsConfigInfo.getTemLowWarningThreshold().toString()).matches();
			if(!temLow) {
				str +="11、单体温度过低告警阈值(摄氏度℃)必须是-300-300！\n";
			}
		}
		//电量过低告警阈值
		if(StringUtils.getString(gprsConfigInfo.getSocLowWarningThreshold()) != null) {
			Pattern regex = Pattern.compile("^-?\\d{1,2}|100|-100$");
			boolean temLow = regex.matcher(gprsConfigInfo.getSocLowWarningThreshold().toString()).matches();
			if(!temLow ) {
				str +="12、电量过低告警阈值必须是-100-100整数！\n";
			}
		}
		if(str.length() != 0) {
			ajaxResponse.setMsg(str);
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			return ajaxResponse;
		}
		try {
			gprsConfigInfoSer.updateParamById(gprsConfigInfo);
		} catch (Exception e) {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("远程主机参数配置出错！");
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/updatePulse", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新基站gprs:远程主机特征测试动作参数", notes = "属性为null的不更新")
	public AjaxResponse<Object> updatePulse(@RequestBody GprsConfigInfo gprsConfigInfo) {
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<>(Constant.RS_CODE_SUCCESS, "远程主机特征测试动作参数成功！");
		//区间五持续时间进行验证
		if(StringUtils.getString(gprsConfigInfo.getSlowSampleTime()) != null) {
			Pattern regex = Pattern.compile("^([0-5]{1})?[0-9]{1,2}|600$");
			boolean volLow = regex.matcher(gprsConfigInfo.getSlowSampleTime().toString()).matches();
			Integer number = gprsConfigInfo.getSlowSampleInterval();
			switch (number) {
			case 0:
				number = 1;
				break;
			case 1:
				number = 5;
				break;
			case 2:
				number = 10;
				break;	
			default:
				break;
			}
			if(number*60 > gprsConfigInfo.getSlowSampleTime()) {
				String str ="区间5的持续时间(ms)至少是区间5采样间隔的60倍!";
				ajaxResponse.setMsg(str);
				ajaxResponse.setCode(Constant.RS_CODE_ERROR);
				return ajaxResponse;
			}
			if(!volLow) {
				String str ="区间5的持续时间(ms)在0-600之间的整数!";
				ajaxResponse.setMsg(str);
				ajaxResponse.setCode(Constant.RS_CODE_ERROR);
				return ajaxResponse;
			}
		}
		try {
			gprsConfigInfoSer.updatePulseById(gprsConfigInfo);
		} catch (Exception e) {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("远程主机特征测试动作参数出错！");
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateBalance", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新基站gprs:主机均衡策略参数配置", notes = "属性为null的不更新")
	public AjaxResponse<Object> updateBalance(@RequestBody ModifyBalanceSend modifyBalanceSend) {
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<>(Constant.RS_CODE_SUCCESS, "主机均衡策略参数配置成功！");
		//充电末期电流阀上线para1 -300-300
		String str = "";
		if(StringUtils.getString(modifyBalanceSend.getPara1()) != null) {
			Pattern regex = Pattern.compile("^(-?)([1-2]?)\\d{1,2}|300|-300$");
			boolean para1 = regex.matcher(modifyBalanceSend.getPara1().toString()).matches();
			if(!para1) {
				str +="1、充电末期电流阀上线必须是-300-300！\n";
			}
		}		
		//充电末期电流阀下线para2 -300-300
		if(StringUtils.getString(modifyBalanceSend.getPara2()) != null) {
			Pattern regex = Pattern.compile("^(-?)([1-2]?)\\d{1,2}|300|-300$");
			boolean para2 = regex.matcher(modifyBalanceSend.getPara2().toString()).matches();
			if(!para2) {
				str +="2、充电末期电流阀下线必须是-300-300！\n";
			}
		}
		//浮充态电压阀值上线para3 0-300
		if(StringUtils.getString(modifyBalanceSend.getPara3()) != null) {
			Pattern regex = Pattern.compile("^([1-2]?)\\d{0,2}|300$");
			boolean para3 = regex.matcher(modifyBalanceSend.getPara3().toString()).matches();
			if(!para3) {
				str +="3、浮充态电压阀值上线0-300！\n";
			}
		}
		//浮充态电压阀值下线para4 0-300
		if(StringUtils.getString(modifyBalanceSend.getPara4()) != null) {
			Pattern regex = Pattern.compile("^([1-2]?)\\d{1,2}|300$");
			boolean para4 = regex.matcher(modifyBalanceSend.getPara4().toString()).matches();
			if(!para4) {
				str +="4、浮充态电压阀值上线0-300！\n";
			}
		}
		//浮充态电路阀值上线para5 -300-300
		if(StringUtils.getString(modifyBalanceSend.getPara5()) != null) {
			Pattern regex = Pattern.compile("^(-?)([1-2]?)\\d{1,2}|300|-300$");
			boolean para5 = regex.matcher(modifyBalanceSend.getPara5().toString()).matches();
			if(!para5) {
				str +="5、浮充态电路阀值上线必须是-300-300！\n";
			}
		}
		//浮充态电流阀值下线para6 -300-300
		if(StringUtils.getString(modifyBalanceSend.getPara6()) != null) {
			Pattern regex = Pattern.compile("^(-?)([1-2]?)\\d{1,2}|300|-300$");
			boolean para6 = regex.matcher(modifyBalanceSend.getPara6().toString()).matches();
			if(!para6) {
				str +="6、浮充态电流阀值下线必须是-300-300！\n";
			}
		}
		//开启均衡电压阀值para7 0-300	00
		if(StringUtils.getString(modifyBalanceSend.getPara7()) != null) {
			Pattern regex = Pattern.compile("^([1-2]?)\\d{1,4}|30000$");
			boolean para7 = regex.matcher(modifyBalanceSend.getPara7().toString()).matches();
			if(!para7) {
				str +="7、开启均衡电压阀值0-30000！\n";
			}
		}
		if(str.length() != 0) {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg(str);
			return ajaxResponse;
		}
		
		try {
			gprsConfigInfoSer.updateBalanceById(modifyBalanceSend);
		} catch (Exception e) {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("主机均衡策略参数配置出错！");
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateBasic", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新基站备用主机参数配置表", notes = "根据pk更新基站gprs参数配置表，属性为null的不更新")
	public AjaxResponse<Object> update(@RequestBody GprsConfigInfo gprsConfigInfo) {
		if (gprsConfigInfo.getId() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置pk！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改备用主机失败！");
		request.setAttribute("ajaxResponse", ajaxResponse);
		// 电话卡号的正则表达式
		if (StringUtils.getString(gprsConfigInfo.getDevicePhone()) != null) {
			Pattern phone = Pattern.compile("^[\\d\\s]{0,16}$");
			Matcher matcherPhone = phone.matcher(gprsConfigInfo.getDevicePhone().trim());
			boolean matchesPhone = matcherPhone.matches();
			if (!matchesPhone) {
				ajaxResponse.setMsg("电话卡号必须是小于16个字符是数字！");
				return ajaxResponse;
			}
		}
		// 备用主机的正则表达式
		if(StringUtils.getString(gprsConfigInfo.getGprsId()) != null) {
			Pattern regex = Pattern.compile("^([A-Z]{1}[1]{1}[A-Z]{1}\\d{6})$");
			Matcher matcher = regex.matcher(gprsConfigInfo.getGprsId().trim());
			boolean matches = matcher.matches();
			if(!matches) {
				ajaxResponse.setMsg("设备编号不能有空格，字符长度不能超过9位，第二位必须是1 。例：T1B000111！");
				return ajaxResponse;
			}
		}
		GprsConfigInfo queryById = gprsConfigInfoSer.selectByPrimaryKey(gprsConfigInfo.getId());
		if (!queryById.getGprsId().equals(gprsConfigInfo.getGprsId())) {
			// 表示，修改gprsId和其他信息
			GprsConfigInfo query = new GprsConfigInfo();
			query.setGprsId(gprsConfigInfo.getGprsId());
			List<GprsConfigInfo> selectListSelective = gprsConfigInfoSer.selectListSelective(query);
			if (selectListSelective != null && selectListSelective.size() > 0) {
				ajaxResponse.setMsg("备用主机已存在！");
				return ajaxResponse;
			}
		}
		gprsConfigInfoSer.updateByPrimaryKeySelective(gprsConfigInfo);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改备用主机成功！");
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateDeviceId", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新", notes = "根据pk更新，属性为null的不更新")
	public AjaxResponse<Object> updateDeviceId(@RequestBody ModifyGprsidSend modifyGprsidSend) {
		AjaxResponse ajaxResponse = validateBean(modifyGprsidSend);
		if (ajaxResponse != null) {
			return ajaxResponse;
		}
		ajaxResponse = new AjaxResponse(Constant.RS_CODE_SUCCESS, "修改ID指令已发送");
		try {
			modifyGprsidSendSer.changeDeviceId(modifyGprsidSend, 0);
		} catch (Exception e) {
			logger.error("发送修改指令失败", e);
			ajaxResponse = new AjaxResponse(Constant.RS_CODE_ERROR, "发送修改指令失败, " + e.getMessage());
		}

		return ajaxResponse;
	}

	/*
	 * 主机导入
	 */
	@Override
	public boolean parseFile(File file, AjaxResponse ajaxResponse, Integer companyId)
			throws EncryptedDocumentException, FileNotFoundException, InvalidFormatException, IOException {
		return gprsConfigInfoSer.parseMasterDeviceExcelFile(file, ajaxResponse);
	}

	@RequestMapping(value = "/entity/detail/{id}", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk获取基站gprs参数配置表", notes = "根据pk获取基站gprs参数配置表")
	public AjaxResponse<GprsConfigInfoDetail> getEntityDetail(@PathVariable Integer id) {
		if (id == null) {
			return new AjaxResponse<GprsConfigInfoDetail>(Constant.RS_CODE_ERROR, "请选择pk！");
		}
		GprsConfigInfoDetail gprsConfigInfo = gprsConfigInfoSer.selectDetailById(id);
		AjaxResponse<GprsConfigInfoDetail> ajaxResponse = new AjaxResponse<GprsConfigInfoDetail>(
				Constant.RS_CODE_SUCCESS, "获取基站gprs参数配置表成功！");
		if (gprsConfigInfo != null) {
			GprsDeviceType gprsDevice = new GprsDeviceType();
			gprsDevice.setTypeCode(gprsConfigInfo.getDeviceType());
			List<GprsDeviceType> device = gprsDeviceTypeSer.selectListSelective(gprsDevice);
			device.get(0).getTypeName();
			gprsConfigInfo.setDeviceTypeStr(device.get(0).getTypeName());
			ajaxResponse.setData(gprsConfigInfo);
		} else {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("获取基站gprs参数配置表失败！");
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "新增基站gprs参数配置表", notes = "新增基站gprs参数配置表,不创建从机")
	public AjaxResponse<GprsConfigInfo> save(@RequestBody GprsConfigInfo gprsConfigInfo) {
		gprsConfigInfo.setId(null);
		GprsConfigInfo queryGprsConfigInfo = new GprsConfigInfo();
		queryGprsConfigInfo.setGprsIdOut(gprsConfigInfo.getGprsId());
		List<GprsConfigInfo> queryList = gprsConfigInfoSer.selectListSelective(queryGprsConfigInfo);
		gprsConfigInfo.setGprsIdOut(gprsConfigInfo.getGprsId().trim());
		// ---add 新增是备用主机
		gprsConfigInfo.setGprsFlag(1);
		AjaxResponse<GprsConfigInfo> ajaxResponse = new AjaxResponse<GprsConfigInfo>(Constant.RS_CODE_ERROR,
				"添加基站gprs参数配置表出错！");
		request.setAttribute("ajaxResponse", ajaxResponse);
		// 电话卡号的正则表达式
		if (StringUtils.getString(gprsConfigInfo.getDevicePhone()) != null) {
			Pattern phone = Pattern.compile("^[\\d\\s]{0,16}$");
			Matcher matcherPhone = phone.matcher(gprsConfigInfo.getDevicePhone().trim());
			boolean matchesPhone = matcherPhone.matches();
			if (!matchesPhone) {
				ajaxResponse.setMsg("电话卡号必须是小于16个字符是数字！");
				return ajaxResponse;
			}
		}

		// 备用主机的正则表达式
		Pattern regex = Pattern.compile("^([A-Z]{1}[1]{1}[A-Z]{1}\\d{6})$");
		Matcher matcher = regex.matcher(gprsConfigInfo.getGprsId().trim());
		boolean matches = matcher.matches();
		if (matches) {
			if (queryList.size() > 0) {
				ajaxResponse.setMsg("设备重复");
				
			} else {
				gprsConfigInfoSer.insertSelective(gprsConfigInfo);
				ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
				ajaxResponse.setMsg("添加基站gprs参数配置表成功！");
			}
		} else {
			ajaxResponse.setMsg("设备编号不能有空格或者字符长度不能超过9位，例：T1B000111");
		}

		return ajaxResponse;
	}

	@RequestMapping(value = "/masterSave", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "新增基站gprs参数配置表", notes = "新增基站gprs参数配置表，创建从机")
	public AjaxResponse<GprsConfigInfo> masterSave(@RequestBody GprsConfigInfo gprsConfigInfo) {
		gprsConfigInfo.setId(null);
		GprsConfigInfo queryGprsConfigInfo = new GprsConfigInfo();
		queryGprsConfigInfo.setGprsId(gprsConfigInfo.getGprsId().trim());
		List<GprsConfigInfo> queryList = gprsConfigInfoSer.selectListSelective(queryGprsConfigInfo);
		gprsConfigInfo.setGprsIdOut(gprsConfigInfo.getGprsId().trim());
		AjaxResponse<GprsConfigInfo> ajaxResponse = new AjaxResponse<GprsConfigInfo>(Constant.RS_CODE_ERROR,
				"添加基站gprs参数配置表出错！");
		request.setAttribute("ajaxResponse", ajaxResponse);
		// 电话卡号的正则表达式
		if (StringUtils.getString(gprsConfigInfo.getDevicePhone()) != null) {
			Pattern phone = Pattern.compile("^[\\d\\s]{0,16}$");
			Matcher matcherPhone = phone.matcher(gprsConfigInfo.getDevicePhone().trim());
			boolean matchesPhone = matcherPhone.matches();
			if (!matchesPhone) {
				ajaxResponse.setMsg("电话卡号必须是小于16个字符是数字！");
				return ajaxResponse;
			}
		}
		// 主机正则表达式
		Pattern regex = Pattern.compile("^([A-Z]{1}[0]{1}[A-Z]{1}\\d{6})$");
		Matcher matcher = regex.matcher(gprsConfigInfo.getGprsId().trim());
		boolean matches = matcher.matches();
		if (matches) {
			if (queryList.size() > 0) {
				ajaxResponse.setMsg("设备编号重复");
				// ------11/15 修改需求 不判断是否有从机
				// ajaxResponse.setMsg("添加基站gprs参数配置表成功！");
				// ---------add 新增主机同时新增24个从机 并且设备类型和规格匹配
				// 原来的gprsConfigInfoSer.isSubDevice(gprsConfigInfo.getGprsId());
				// gprsConfigInfoSer.isSubDevice(gprsConfigInfo.getGprsId().trim(),
				// gprsConfigInfo.getDeviceType(),gprsConfigInfo.getGprsSpec().trim());

			} else {
				try {
				gprsConfigInfoSer.insertSelective(gprsConfigInfo);
				// ----------add
				// 原来的
				// gprsConfigInfoSer.createSubDeviceByGprsId(gprsConfigInfo.getGprsId());
				// 新增一个主机后24个从机的设备类型和规格和主机匹配
				gprsConfigInfoSer.createSubDevice(gprsConfigInfo.getGprsId().trim(),gprsConfigInfo.getDeviceType(),
						gprsConfigInfo.getGprsSpec().trim(),0,gprsConfigInfo.getSubDeviceCount());
				// ----end
				} catch (Exception e) {
					ajaxResponse.setCode(Constant.RS_CODE_ERROR);
					ajaxResponse.setMsg("新增失败!");
					return ajaxResponse;
				}
				ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
				ajaxResponse.setMsg("添加设备成功！");
			}
		} else {
			ajaxResponse.setMsg("设备编号不能有空格或者字符长度不能超过9位，例：Y0A000001/T0B000002");
		}

		return ajaxResponse;
	}

	@RequestMapping(value = "/unbindGprsList/{gprsId}", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据gprsId查询获取未绑定基站gprs参数配置表列表", notes = "返回基站gprs参数配置表列表")
	public AjaxResponse getUnbindGprsList(@PathVariable String gprsId) {
		List unbindGprsList = gprsConfigInfoSer.selectUnbindGprsList(gprsId);
		AjaxResponse ajaxResponse = new AjaxResponse(Constant.RS_CODE_SUCCESS, "查询成功", unbindGprsList);
		return ajaxResponse;
	}

	// ----add
	@RequestMapping(value = "/bindGprsList", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据gprsId查询获取绑定基站gprs参数配置表列表", notes = "返回基站gprs参数配置表列表")
	public AjaxResponse<List<String>> getBindGprsList(@RequestBody GprsConfigInfo gprsConfigInfo) {
		List<String> bindGprsList = gprsConfigInfoSer.selectBindGprsList(gprsConfigInfo);
		AjaxResponse<List<String>> ajaxResponse = new AjaxResponse<List<String>>(Constant.RS_CODE_SUCCESS, "查询成功",
				bindGprsList);
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateByGprs", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新基站gprs参数配置表", notes = "根据pk更新基站gprs参数配置表，属性为null的不更新")
	public AjaxResponse<Object> updateByGprs(@RequestBody PulseVo pulse) {
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改基站gprs参数配置表出错！");
		request.setAttribute(Constant.ERROR_REQUEST, ajaxResponse);
		gprsConfigInfoSer.updateAndSend(pulse);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改基站gprs参数配置表成功！");
		return ajaxResponse;
	}

	/*
	 * -----10/17 add 添加删除接口
	 */
	@RequestMapping(value = "/deleteGprsConfigInfo", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk删除基站gprs参数配置表", notes = "根据pk删除基站gprs参数配置表")
	public AjaxResponse<Object> deleteByGprsId(@RequestBody GprsConfigInfo gprsConfigInfo) {
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "删除gprs参数配置表出错！");
		if (gprsConfigInfo.getId() == null) {
			return ajaxResponse;
		}
		ajaxResponse.setMsg("删除失败!");
		request.setAttribute("ajaxResponse", ajaxResponse);
		gprsConfigInfoSer.deleteByPrimaryKey(gprsConfigInfo.getId());
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("删除成功!");
		return ajaxResponse;

	}

	public int estimateIsNull(GprsConfigInfo gprsConfigInfo) {
		int number = 0;
		if (gprsConfigInfo.getConnectionType() != null) {
			number++;
		}
		if (gprsConfigInfo.getHeartbeatInterval() != null) {
			number++;
		}
		if (gprsConfigInfo.getFloatInterval() != null) {
			number++;
		}
		if (gprsConfigInfo.getDischargeInterval() != null) {
			number++;
		}
		if (gprsConfigInfo.getChargeThreshold() != null) {
			number++;
		}
		if (gprsConfigInfo.getDischargeThreshold() != null) {
			number++;
		}
		if (gprsConfigInfo.getNominalCapacity() != null) {
			number++;
		}
		if (gprsConfigInfo.getCurrentCapacity() != null) {
			number++;
		}
		if (gprsConfigInfo.getVolHighWarningThreshold() != null) {
			number++;
		}
		if (gprsConfigInfo.getVolLowWarningThreshold() != null) {
			number++;
		}
		if (gprsConfigInfo.getTemHighWarningThreshold() != null) {
			number++;
		}
		if (gprsConfigInfo.getTemLowWarningThreshold() != null) {
			number++;
		}
		if (gprsConfigInfo.getSocLowWarningThreshold() != null) {
			number++;
		}
		if (gprsConfigInfo.getPublishTime() != null) {
			number++;
		}
		if (gprsConfigInfo.getPublishVersion() != null) {
			number++;
		}
		if (gprsConfigInfo.getChildrenVersion() != null) {
			number++;
		}
		if (gprsConfigInfo.getEditVersion() != null) {
			number++;
		}
		if (gprsConfigInfo.getDeviceType() != null) {
			number++;
		}

		if (gprsConfigInfo.getDevicePhone() != null) {
			number++;
		}
		if (gprsConfigInfo.getCreateTime() != null) {
			number++;
		}

		if (gprsConfigInfo.getCreateId() != null) {
			number++;
		}
		if (gprsConfigInfo.getCreateName() != null) {
			number++;
		}
		if (gprsConfigInfo.getRefreshTime() != null) {
			number++;
		}
		if (gprsConfigInfo.getConsoleCellCapError() != null) {
			number++;
		}
		if (gprsConfigInfo.getConsoleCellCapNormal() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMaxBad() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMinBad() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMinExcellent() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMaxMedium() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMaxExcellent() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMinGood() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMaxGood() != null) {
			number++;
		}
		if (gprsConfigInfo.getDurationMinMedium() != null) {
			number++;
		}
		if (gprsConfigInfo.getValidDischargeVol() != null) {
			number++;
		}

		if (gprsConfigInfo.getValidChargeVol() != null) {
			number++;
		}
		if (gprsConfigInfo.getDownVol() != null) {
			number++;
		}
		if (gprsConfigInfo.getHallFlag() != null) {
			number++;
		}
		if (gprsConfigInfo.getFastSampleInterval() != null) {
			number++;
		}
		if (gprsConfigInfo.getSlowSampleInterval() != null) {
			number++;
		}
		if (gprsConfigInfo.getDischargeTime() != null) {
			number++;
		}
		if (gprsConfigInfo.getSlowSampleTime() != null) {
			number++;
		}
		if (gprsConfigInfo.getValidChargeCur() != null) {
			number++;
		}
		if (gprsConfigInfo.getValidChargeCur() != null) {
			number++;
		}
		if (gprsConfigInfo.getDownCur() != null) {
			number++;
		}
		if (gprsConfigInfo.getDownVol() != null) {
			number++;
		}
		if (gprsConfigInfo.getValidDay() != null) {
			number++;
		}
		if (gprsConfigInfo.getSuggestAverageNum() != null) {
			number++;
		}

		if (gprsConfigInfo.getSuggestTime() != null) {
			number++;
		}

		if (gprsConfigInfo.getSuggestAverageNum() != null) {
			number++;
		}
		if (gprsConfigInfo.getMarginTime() != null) {
			number++;
		}
		if (gprsConfigInfo.getMaxDischargeCur() != null) {
			number++;
		}
		if(gprsConfigInfo.getChargeInterval() != null) {
			number++;
		}
		
		return number;

	}
}