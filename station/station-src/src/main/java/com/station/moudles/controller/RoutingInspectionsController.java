package com.station.moudles.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.station.common.Constant;
import com.station.common.utils.CommonConvertUtils;
import com.station.moudles.entity.GprsConfigInfo;
import com.station.moudles.entity.RoutingInspectionDetail;
import com.station.moudles.entity.RoutingInspectionStationDetail;
import com.station.moudles.entity.RoutingInspections;
import com.station.moudles.entity.RoutingInspectionsStation;
import com.station.moudles.service.RoutingInspectionDetailService;
import com.station.moudles.service.RoutingInspectionsService;
import com.station.moudles.service.StationInfoService;
import com.station.moudles.vo.AjaxResponse;
import com.station.moudles.vo.CommonSearchVo;
import com.station.moudles.vo.ShowPage;
import com.station.moudles.vo.search.SearchRoutingInspectionsPagingVo;
import com.station.moudles.vo.search.SearchStationInfoPagingVo;

import io.swagger.annotations.ApiOperation;

/**
 * This class was generated by Bill Generator.
 * This class corresponds to the database table routing_inspections  巡检记录
 *
 * @zdmgenerated 2017-48-21 05:48
 */
@Controller
@RequestMapping(value = "/routingInspections")
public class RoutingInspectionsController extends BaseController {
	@Autowired
	RoutingInspectionsService routingInspectionsSer;
	
	@Autowired
	RoutingInspectionDetailService routingInspectionDetailSer;
	
	@RequestMapping(value = "/listPage", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取巡检记录列表", notes = "返回巡检记录列表")
	public AjaxResponse<ShowPage<RoutingInspections>> getRoutingInspectionsList(@RequestBody SearchRoutingInspectionsPagingVo searchRoutingInspectionsPagingVo) {
		List<RoutingInspections> routingInspectionsList = routingInspectionsSer.selectListSelectivePaging(searchRoutingInspectionsPagingVo);
		ShowPage<RoutingInspections> page = new ShowPage<RoutingInspections>(searchRoutingInspectionsPagingVo, routingInspectionsList);
		AjaxResponse<ShowPage<RoutingInspections>> ajaxResponse = new AjaxResponse<ShowPage<RoutingInspections>>(page);
		return ajaxResponse;
	}

	@RequestMapping(value = "/station/listPage", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取巡检记录列表", notes = "返回巡检记录列表")
	public AjaxResponse<ShowPage<RoutingInspectionsStation>> getRoutingInspectionsStationList(@RequestBody CommonSearchVo commonSearchVo) {
		SearchStationInfoPagingVo searchStationInfoPagingVo = new SearchStationInfoPagingVo();
		CommonConvertUtils.convertCommonToStationPage(commonSearchVo, searchStationInfoPagingVo);
		List<RoutingInspectionsStation> routingInspectionsList = routingInspectionsSer.selectStationListSelectivePaging(searchStationInfoPagingVo);
		ShowPage<RoutingInspectionsStation> page = new ShowPage<RoutingInspectionsStation>(searchStationInfoPagingVo, routingInspectionsList);
		AjaxResponse<ShowPage<RoutingInspectionsStation>> ajaxResponse = new AjaxResponse<ShowPage<RoutingInspectionsStation>>(page);
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateAll", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新巡检记录", notes = "根据pk更新巡检记录，属性为null的不更新")
	public AjaxResponse<Object> updateAll(@RequestBody RoutingInspectionStationDetail routingInspectionStationDetail) {
		if (routingInspectionStationDetail.getRoutingInspectionId() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置pk！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改巡检记录出错！");
		request.setAttribute("ajaxResponse", ajaxResponse);
		routingInspectionsSer.updateRoutingInspectionStationDetail(routingInspectionStationDetail);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改巡检记录成功！");
		return ajaxResponse;
	}

	@RequestMapping(value = "/stationDetail/entity/{routingInspectionId}", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk获取巡检记录", notes = "根据pk获取巡检记录")
	public AjaxResponse<RoutingInspectionStationDetail> getStationDetailEntity(@PathVariable Integer routingInspectionId) {
		if (routingInspectionId == null) {
			return new AjaxResponse<RoutingInspectionStationDetail>(Constant.RS_CODE_ERROR, "请选择pk！");
		}
		RoutingInspectionStationDetail routingInspections = routingInspectionsSer.selectStationDetailByPrimaryKey(routingInspectionId);
		//--------10/16 add 获得各个单体的详细内容		
		Integer routingInspectionsId = routingInspections.getRoutingInspectionId();		
		List<RoutingInspectionDetail> routingInspectionDetailList = routingInspectionDetailSer.selectStationSelective(routingInspectionsId);		
		routingInspections.setRoutingInspectionDetailList(routingInspectionDetailList);
		//-------end
		AjaxResponse<RoutingInspectionStationDetail> ajaxResponse = new AjaxResponse<RoutingInspectionStationDetail>(Constant.RS_CODE_SUCCESS, "获取巡检记录成功！");
		if (routingInspections != null) {
			ajaxResponse.setData(routingInspections);
		} else {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("获取巡检记录失败！");
		}
		return ajaxResponse;
	}
	/*
	 *---------10/16 add 对状态为1安装维护中的记录，也有确认功能。确认时，可选择成功/失败 
	 */
	@RequestMapping(value = "/updateStatus", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新巡检记录", notes = "根据pk更新巡检记录")
	public AjaxResponse<Object> updateStatus(@RequestBody RoutingInspections routingInspections) {
		if (routingInspections.getRoutingInspectionId() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置pk！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改失败！");
		request.setAttribute("ajaxResponse", ajaxResponse);
		routingInspectionsSer.updateByPrimaryKeySelective(routingInspections);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改成功！");
		return ajaxResponse;
	}
	
	
	
	@Override
	public boolean parseFile(File file, AjaxResponse ajaxResponse, Integer companyId) throws EncryptedDocumentException, FileNotFoundException, InvalidFormatException, IOException {
		return routingInspectionsSer.parseRoutingInspectionExcelFile(file, ajaxResponse);
	}
}