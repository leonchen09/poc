package com.station.moudles.controller;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;

import com.station.common.Constant;
import com.station.moudles.entity.Company;
import com.station.moudles.entity.StationInfo;
import com.station.moudles.entity.User;
import com.station.moudles.service.CompanyService;
import com.station.moudles.service.StationInfoService;
import com.station.moudles.vo.AjaxResponse;
import com.station.moudles.vo.ShowPage;
import com.station.moudles.vo.search.SearchCompanyPagingVo;

import io.swagger.annotations.ApiOperation;

/**
 * This class was generated by Bill Generator. This class corresponds to the
 * database table companies 公司
 *
 * @zdmgenerated 2017-06-18 05:06
 */
@Controller
@RequestMapping(value = "/company")
public class CompanyController extends BaseController {
	@Autowired
	CompanyService companySer;
	@Autowired
	StationInfoService stationInfoSer;

	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取公司列表", notes = "返回公司列表")
	public AjaxResponse<List<Company>> getCompanyList(@RequestBody Company queryCompany) {
		Integer companyId = queryCompany.getCompanyId();
		queryCompany.setCompanyId(null);
		List<Company> companyList = companySer.selectListSelective(queryCompany);
		// 解决公司管理修改时，把自己的公司等级下调，导致选择上级公司时，包含自己
		// web端修改公司时，把当前公司的 id 传过来
		if (companyId != null) {
			companyList = companyList.stream().filter(c -> !c.getCompanyId().equals(companyId))
					.collect(Collectors.toList());
		}
		AjaxResponse<List<Company>> ajaxResponse = new AjaxResponse<List<Company>>(companyList);
		return ajaxResponse;
	}

	@RequestMapping(value = "/listPage", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取公司列表分页", notes = "返回公司列表分页")
	public AjaxResponse<ShowPage<Company>> getCompanyListPage(
			@RequestBody SearchCompanyPagingVo searchCompanyPagingVo) {
		List<Company> companyList = companySer.selectListSelectivePaging(searchCompanyPagingVo);
		ShowPage<Company> page = new ShowPage<Company>(searchCompanyPagingVo, companyList);
		AjaxResponse<ShowPage<Company>> ajaxResponse = new AjaxResponse<ShowPage<Company>>(page);
		return ajaxResponse;
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "新增公司", notes = "新增公司")
	public AjaxResponse<Company> save(@RequestBody Company company) {
		company.setCompanyId(null);
		AjaxResponse<Company> ajaxResponse = new AjaxResponse<Company>(Constant.RS_CODE_ERROR, "添加公司出错！");
		request.setAttribute(Constant.ERROR_REQUEST, ajaxResponse);
		// 增加逻辑，防止公司名重复，只根据公司名查询
		Company temp = new Company();
		temp.setCompanyName(company.getCompanyName());
		int i = companySer.selectListCountSelective(temp);
		if (i > 0) {
			ajaxResponse.setCode(Constant.ERROR_REQUEST);
			ajaxResponse.setMsg("公司已存在！");
		} else {
			companySer.insertSelective(company);
			ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
			ajaxResponse.setMsg("添加公司成功！");
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新公司", notes = "根据pk更新公司，属性为null的不更新")
	public AjaxResponse<Object> update(@RequestBody Company company) {
		if (company.getCompanyId() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置pk！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改公司出错！");
		request.setAttribute(Constant.ERROR_REQUEST, ajaxResponse);
		if (new Integer(1).equals(company.getCompanyLevel())) {
			company.setParentCompanyId(-1);
		}
		companySer.updateByPrimaryKeySelective(company);
		StationInfo updateStationInfo = new StationInfo();
		updateStationInfo.setCompanyId3(company.getCompanyId());
		updateStationInfo.setCompanyName3(company.getCompanyName());
		stationInfoSer.updateByCompanyIdSelective(updateStationInfo);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改公司成功！");
		return ajaxResponse;
	}

	@RequestMapping(value = "/entity/{companyId}", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk获取公司", notes = "根据pk获取公司")
	public AjaxResponse<Company> getEntity(@PathVariable Integer companyId) {
		if (companyId == null) {
			return new AjaxResponse<Company>(Constant.RS_CODE_ERROR, "请选择pk！");
		}
		Company company = companySer.selectByPrimaryKey(companyId);
		AjaxResponse<Company> ajaxResponse = new AjaxResponse<Company>(Constant.RS_CODE_SUCCESS, "获取公司成功！");
		if (company != null) {
			ajaxResponse.setData(company);
		} else {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("获取公司失败！");
		}
		return ajaxResponse;
	}
	
	
}