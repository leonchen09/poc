package com.station.moudles.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.station.common.Constant;
import com.station.moudles.entity.Parameter;
import com.station.moudles.service.ParameterService;
import com.station.moudles.vo.AjaxResponse;
import com.station.moudles.vo.AppConfigVo;

import io.swagger.annotations.ApiOperation;

/**
 * This class was generated by Bill Generator. This class corresponds to the
 * database table parameters
 *
 * @zdmgenerated 2017-28-20 11:28
 */
@Controller
@RequestMapping(value = "/parameter")
public class ParameterController extends BaseController {
	@Autowired
	ParameterService parameterSer;

	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "获取所有参数列表")
	public AjaxResponse<List<Parameter>> getParameterList() {
		AjaxResponse<List<Parameter>> ajaxResponse = new AjaxResponse<List<Parameter>>();
		List<Parameter> parameterList = parameterSer.selectListSelective(null);
		ajaxResponse.setData(parameterList);
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateAll", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "更新对应parameter")
	public AjaxResponse<List<Parameter>> updateParameterAll(@Validated @RequestBody AppConfigVo appConfig , BindingResult br) throws IllegalArgumentException, IllegalAccessException {
		if (br.hasErrors()) {
			List<ObjectError> errorList = br.getAllErrors();
			StringBuffer sb = new StringBuffer();
    		for (ObjectError objectError : errorList) {
				sb.append(sb.length() > 0 ? "\r\n" : "").append(objectError.getDefaultMessage());
			}
    		return new AjaxResponse<>(Constant.RS_CODE_ERROR, sb.toString());
		}
		AjaxResponse<List<Parameter>> ajaxResponse = new AjaxResponse<List<Parameter>>();
		parameterSer.updateParameterAll(appConfig);
		return ajaxResponse;
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新", notes = "根据pk更新，属性为null的不更新")
	public AjaxResponse<Object> update(@RequestBody Parameter parameter) {
		if (parameter.getParameterCode() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置pk！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改出错！");
		request.setAttribute(Constant.ERROR_REQUEST, ajaxResponse);
		parameterSer.updateByPrimaryKeySelective(parameter);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改成功！");
		return ajaxResponse;
	}

	@RequestMapping(value = "/entity/{parameterCode}", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk获取", notes = "根据pk获取")
	public AjaxResponse<Parameter> getEntity(@PathVariable String parameterCode) {
		if (parameterCode == null) {
			return new AjaxResponse<Parameter>(Constant.RS_CODE_ERROR, "请选择pk！");
		}
		Parameter parameter = parameterSer.selectByPrimaryKey(parameterCode);
		AjaxResponse<Parameter> ajaxResponse = new AjaxResponse<Parameter>(Constant.RS_CODE_SUCCESS, "获取成功！");
		if (parameter != null) {
			ajaxResponse.setData(parameter);
		} else {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("获取失败！");
		}
		return ajaxResponse;
	}
}