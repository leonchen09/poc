package com.station.moudles.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.station.common.Constant;
import com.station.moudles.entity.GprsConfigInfo;
import com.station.moudles.entity.SubDevice;
import com.station.moudles.service.SubDeviceService;
import com.station.moudles.vo.AjaxResponse;
import com.station.moudles.vo.ShowPage;
import com.station.moudles.vo.search.SearchSubDevicePagingVo;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * This class was generated by Bill Generator. This class corresponds to the
 * database table sub_devices 从机设备
 *
 * @zdmgenerated 2017-40-24 05:40
 */
@Controller
@RequestMapping(value = "/subDevice")
public class SubDeviceController extends BaseController {
	@Autowired
	SubDeviceService subDeviceSer;

	@RequestMapping(value = "/listPage", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取从机设备列表", notes = "返回从机设备列表")
	public AjaxResponse<ShowPage<SubDevice>> getSubDeviceListPage(
			@RequestBody SearchSubDevicePagingVo searchSubDevicePagingVo) {
		// add 查询出备用从的标志是备用的
		searchSubDevicePagingVo.setSubFlag(1);
		
		List<SubDevice> subDeviceList = subDeviceSer.selectListSelectivePaging(searchSubDevicePagingVo);
		ShowPage<SubDevice> page = new ShowPage<SubDevice>(searchSubDevicePagingVo, subDeviceList);
		AjaxResponse<ShowPage<SubDevice>> ajaxResponse = new AjaxResponse<ShowPage<SubDevice>>(page);
		return ajaxResponse;
	}

	@RequestMapping(value = "/updateBasic", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新从机设备", notes = "根据pk更新从机设备，属性为null的不更新")
	public AjaxResponse<Object> update(@RequestBody SubDevice subDevice) {
		if (subDevice.getSubDeviceIdOut() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置pk！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改从机设备出错！");
		// if (subDevice.getGprsId() == null) {
		// ajaxResponse.setMsg("gprsId不能为空");
		// return ajaxResponse;
		// }
		//验证从机修改的从机id
		Pattern regex = Pattern.compile("^([A-Z]{1}\\d{8})$");
		Matcher matcher = regex.matcher(subDevice.getSubDeviceIdOut().trim());
		boolean matches = matcher.matches();
		if(!matches) {
			ajaxResponse.setMsg("备用从机的编号填写不正确!例：B00000002");
			return ajaxResponse;
		}
		// 备用从机subdeviceId不能重复，从机subdeviceId可以重复
		if (subDevice.getSubFlag() != null && new Integer(1).equals(subDevice.getSubFlag())) {
			// 修改 备用从机，1、修改subdeviceId和其他信息  2、只修改其他信息 
			SubDevice queryById = subDeviceSer.selectByPrimaryKey(subDevice.getId());
			if (!queryById.getSubDeviceId().equals(subDevice.getSubDeviceId())) {
				// subdeviceId不相同，修改subdeviceId和其他信息
				SubDevice query = new SubDevice();
				query.setSubDeviceIdOut(subDevice.getSubDeviceIdOut());
				query.setSubFlag(1);
				int count = subDeviceSer.selectListCountSelective(query);
				if (count > 0) {
					ajaxResponse.setMsg("备用从机已存在！");
					return ajaxResponse;
				}
			}
		}
		request.setAttribute("ajaxResponse", ajaxResponse);
		subDeviceSer.updateByPrimaryKeySelective(subDevice);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("修改从机设备成功！");
		return ajaxResponse;
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "新增从机设备", notes = "新增从机设备")
	@ApiImplicitParams(value = { @ApiImplicitParam(required = false, name = "id", paramType = "query") })
	public AjaxResponse<SubDevice> save(@RequestBody SubDevice subDevice) {
		subDevice.setId(null);
		subDevice.setSubDeviceId(subDevice.getSubDeviceIdOut());
		// ---add 新增从机设备设置为备用 1 备用 0 不备用
		subDevice.setSubFlag(1);
		// ----end
		AjaxResponse<SubDevice> ajaxResponse = new AjaxResponse<SubDevice>(Constant.RS_CODE_ERROR, "添加从机设备出错！");
		request.setAttribute("ajaxResponse", ajaxResponse);
		SubDevice querySubDevice = new SubDevice();
		querySubDevice.setSubDeviceIdOut(subDevice.getSubDeviceIdOut().trim());
		List<SubDevice> subDeviceList = subDeviceSer.selectListSelective(querySubDevice);
		// 查询出没有就要新增
		if (subDeviceList.size() == 0) {
			// 备用从机机的正则表达式
			Pattern regex = Pattern.compile("^([A-Z]{1}\\d{8})$");
			Matcher matcher = regex.matcher(subDevice.getSubDeviceIdOut().trim());
			boolean matches = matcher.matches();
			if (matches) {
				subDeviceSer.insertSelective(subDevice);
				ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
				ajaxResponse.setMsg("添加从机设备成功！");
			} else {
				ajaxResponse.setMsg("备用从机的编号填写不正确!例：B00000002");
			}

		} else {
			ajaxResponse.setMsg("从机设备编号已经存在！");
		}
		return ajaxResponse;
	}

	/*
	 * -----10/17 add 添加删除接口
	 */
	@RequestMapping(value = "/deleteSubDevice", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk删除基站gprs参数配置表", notes = "根据pk删除基站gprs参数配置表")
	public AjaxResponse<Object> deleteBySubDeviceId(@RequestBody SubDevice subDevice) {
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "删除gprs参数配置表出错！");
		if (subDevice.getId() == null) {
			return ajaxResponse;
		}
		ajaxResponse.setMsg("删除失败!");
		request.setAttribute("ajaxResponse", ajaxResponse);
		Integer ID = subDevice.getId();
		subDeviceSer.deleteByPrimaryKey(ID);
		ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
		ajaxResponse.setMsg("删除成功!");
		return ajaxResponse;

	}

	/**
	 * 备用从机设备导入
	 */
	@Override
	public boolean parseFile(File file, @SuppressWarnings("rawtypes") AjaxResponse ajaxResponse, Integer companyId)
			throws EncryptedDocumentException, FileNotFoundException, InvalidFormatException, IOException {
		return subDeviceSer.parseSubDeviceExcelFile(file, ajaxResponse);
	}
}